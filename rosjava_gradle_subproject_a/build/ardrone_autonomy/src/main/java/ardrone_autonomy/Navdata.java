package ardrone_autonomy;

public interface Navdata extends org.ros.internal.message.Message {
  static final java.lang.String _TYPE = "ardrone_autonomy/Navdata";
  static final java.lang.String _DEFINITION = "Header header\n\n# Navdata including the ARDrone 2 specifica sensors\n# (magnetometer, barometer)\n\n# 0 means no battery, 100 means full battery\nfloat32 batteryPercent\n\n# 0: Unknown, 1: Init, 2: Landed, 3: Flying, 4: Hovering, 5: Test\n# 6: Taking off, 7: Goto Fix Point, 8: Landing, 9: Looping\n# Note: 3,7 seems to discriminate type of flying (isFly = 3 | 7)\nuint32 state\n\nint32 magX\nint32 magY\nint32 magZ\n\n# pressure sensor\nint32 pressure\n\n# apparently, there was a temperature sensor added as well.\nint32 temp\n\n# wind sensing...\nfloat32 wind_speed\nfloat32 wind_angle\nfloat32 wind_comp_angle\n\n# left/right tilt in degrees (rotation about the X axis)\nfloat32 rotX\n\n# forward/backward tilt in degrees (rotation about the Y axis)\nfloat32 rotY\n\n# orientation in degrees (rotation about the Z axis)\nfloat32 rotZ\n\n# estimated altitude (cm)\nint32 altd\n\n# linear velocity (mm/sec)\nfloat32 vx\n\n# linear velocity (mm/sec)\nfloat32 vy\n\n# linear velocity (mm/sec)\nfloat32 vz\n\n#linear accelerations (unit: g)\nfloat32 ax\nfloat32 ay\nfloat32 az\n\n#motor commands (unit 0 to 255)\nuint8 motor1\nuint8 motor2\nuint8 motor3\nuint8 motor4\n\n#Tags in Vision Detectoion\nuint32 tags_count\nuint32[] tags_type\nuint32[] tags_xc\nuint32[] tags_yc\nuint32[] tags_width\nuint32[] tags_height\nfloat32[] tags_orientation\nfloat32[] tags_distance\n\n#time stamp\nfloat32 tm\n";
  std_msgs.Header getHeader();
  void setHeader(std_msgs.Header value);
  float getBatteryPercent();
  void setBatteryPercent(float value);
  int getState();
  void setState(int value);
  int getMagX();
  void setMagX(int value);
  int getMagY();
  void setMagY(int value);
  int getMagZ();
  void setMagZ(int value);
  int getPressure();
  void setPressure(int value);
  int getTemp();
  void setTemp(int value);
  float getWindSpeed();
  void setWindSpeed(float value);
  float getWindAngle();
  void setWindAngle(float value);
  float getWindCompAngle();
  void setWindCompAngle(float value);
  float getRotX();
  void setRotX(float value);
  float getRotY();
  void setRotY(float value);
  float getRotZ();
  void setRotZ(float value);
  int getAltd();
  void setAltd(int value);
  float getVx();
  void setVx(float value);
  float getVy();
  void setVy(float value);
  float getVz();
  void setVz(float value);
  float getAx();
  void setAx(float value);
  float getAy();
  void setAy(float value);
  float getAz();
  void setAz(float value);
  byte getMotor1();
  void setMotor1(byte value);
  byte getMotor2();
  void setMotor2(byte value);
  byte getMotor3();
  void setMotor3(byte value);
  byte getMotor4();
  void setMotor4(byte value);
  int getTagsCount();
  void setTagsCount(int value);
  int[] getTagsType();
  void setTagsType(int[] value);
  int[] getTagsXc();
  void setTagsXc(int[] value);
  int[] getTagsYc();
  void setTagsYc(int[] value);
  int[] getTagsWidth();
  void setTagsWidth(int[] value);
  int[] getTagsHeight();
  void setTagsHeight(int[] value);
  float[] getTagsOrientation();
  void setTagsOrientation(float[] value);
  float[] getTagsDistance();
  void setTagsDistance(float[] value);
  float getTm();
  void setTm(float value);
}
